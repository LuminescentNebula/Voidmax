---
  config:
    class:
      hideEmptyMembersBox: true
---
classDiagram 
    %%class Renderer {
    %%    <<interface>>
    %%    drawSprite()
    %%    %% #//Sprite sprite, float x, float y,\n \t float width, float height,\n flaot rotation
    %%}

    namespace Systems {
        class Game
        class Logger
        class Update{
            <<Interface>>
            update(float deltaTime)
        }
        class Render {
            <<Interface>>
            render()
        }
    }
    Game --|> Update
    Game --|> Render

    class Game {
        processInput()
      
        $ instance() Game
        getLogger()
        getFileSystem()
        getAudioPlayer()
    }

    class Logger {
        getLogLevel() byte
        setLogLevel(byte level)
    }


    %%class Save {
    %%    
    %%}

    class Level {
        int width, height
        getLevelWidht() int
        getLevelHeight() int
        Minefield minefield
        GridPlayer player
        onEnter()
        beforeOpen()
        afterOpen()
        onExit()
    }
    Level --> GridPlayer
    %%LevelScreen --> Level
    %%Star --> Level

    class Minefield {
        Cell[][] cells
    }

    Level "1" --> "1" Minefield
    Minefield "1" --> "many" Cell
    
    namespace Cellspace {
        class Cell {
            open()
        }
        %%class EmptyCell
        class EnemyCell
        %%class MineCell
        class EventCell
        %%class EnterCell
        %%class ExitCell
    }
    %%Cell <|-- EmptyCell
    Cell <|-- EnemyCell
    %%Cell <|-- MineCell
    Cell <|-- EventCell
    %%Cell <|-- EnterCell
    %%Cell <|-- ExitCell  
       %%EventCell --> EventData

    namespace CombatSpace {
        class Combat
        class CombatObject
        class Enemy
        class CombatPlayer


        class HealthComponent
        class MoveComponent
        class AttackComponent
    }

    namespace ActionSpace {
        class Action
        class Attack
        class Defend
        class Move
    }

    class Combat {
        CombatPlayer player
        Enemy[] enemies
    }


    namespace UtilitySpace {
        class Point
        class Graph~E~
    }
    class Point {
        int x, y
        getX() int
        getY() int
    }

    class HealthComponent {
        <<interface>>
        getHealth() int
        changeHealth(int delta)
    }
    class MoveComponent {
        <<interface>>
        move(Point point) boolean
        getMovePoints() int
    }
    class AttackComponent {
        <<interface>>
        attack(CombatObject target)
        getAttackType()
    }

    CombatObject --|> MoveComponent
    CombatObject --|> HealthComponent
    CombatObject --|> AttackComponent
    class CombatObject{
        <<interface>>
        getTeam()

        getPosition() Point
        %% Если рядом с объектом есть другой объект, то вызывается onNear
        onNear()
        %% Если объект находится в одной клетке с другим объектом, то вызывается onCollide
        onCollide()
        %% Можно ли встать в ту же клетку, что и объект
        isCollidable() boolean
    }
    Combat --> Enemy
    Enemy --|> CombatObject
    CombatPlayer --|> CombatObject

    Combat --> CombatPlayer
    EnemyCell --> Combat
    %%CombatScreen --> Combat

    GridPlayer --|> CombatPlayer


    class GridPlayer {
        Point position
        float rotation
        move()
    }

    namespace LevelSpace {
        class Level
        class Minefield
        class GridPlayer
    }


